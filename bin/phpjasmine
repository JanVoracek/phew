#!/usr/bin/env php
<?php

$autoloadFiles = array(
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php'
);

$composerInstalled = false;

foreach ($autoloadFiles as $file) {
    if (file_exists($file)) {
        require_once($file);
        $composerInstalled = true;
        break;
    }
}

if (!$composerInstalled) {
    echo 'You need to set up the project dependencies using the following commands:' . PHP_EOL .
        'wget http://getcomposer.org/composer.phar' . PHP_EOL .
        'php composer.phar install' . PHP_EOL;
    exit(1);
}

unset($composerInstalled, $files, $file);

$specDir = "spec";
$phpJasmineDir = __DIR__ . '/../src';
$phpJasmineBootstrap = $phpJasmineDir . '/bootstrap.php';


ob_start();

register_shutdown_function('ob_end_flush');

require_once($phpJasmineBootstrap);

if (!is_dir($specDir)) {
    die("Spec dir is missing");
}


class RecursiveSpecIterator extends RecursiveFilterIterator
{


    public function accept()
    {
        return self::filenameEndsWith($this->current()->getFilename(), '.spec.php');
    }

    private static function filenameEndsWith($filename, $str)
    {
        $length = strlen($str);
        return (substr($filename, -$length) === $str);
    }
}

$recursiveDirectoryIterator = new RecursiveDirectoryIterator($specDir);
$recursiveSpecIterator = new RecursiveSpecIterator($recursiveDirectoryIterator);


foreach ($recursiveSpecIterator as $fileInfo) {
    require_once($fileInfo->getPathName());
}


echo "
PhpJasmine (v0.0.1-alpha)
-------------------------

";
$start = microtime(true);
\PhpJasmine\GlobalContext::getContext()->runExamples();
echo "\n\nExecution time: " . round(microtime(true) - $start, 2) . 's';